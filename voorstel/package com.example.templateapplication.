package com.example.templateapplication.ui.components

import android.content.Intent
import android.net.Uri
import androidx.compose.foundation.layout.fillMaxSize
import androidx.compose.material3.*
import androidx.compose.material3.icons.Icons
import androidx.compose.material3.icons.filled.DateRange
import androidx.compose.material3.icons.filled.Face
import androidx.compose.material3.icons.outlined.Home
import androidx.compose.material3.icons.outlined.Menu
import androidx.compose.material3.icons.outlined.MoreVert
import androidx.compose.material3.icons.outlined.Person
import androidx.compose.material3.icons.outlined.Search
import androidx.compose.material3.icons.outlined.Settings
import androidx.compose.material3.icons.outlined.ShoppingCart
import androidx.compose.material3.icons.outlined.ViewList
import androidx.compose.material3.icons.outlined.Work
import androidx.compose.material3.icons.outlined.WorkOutline
import androidx.compose.runtime.Composable
import androidx.compose.runtime.remember
import androidx.compose.ui.Modifier
import androidx.compose.ui.graphics.vector.ImageVector
import androidx.compose.ui.platform.LocalContext
import androidx.compose.ui.res.stringResource
import androidx.compose.ui.res.vectorResource
import com.example.templateapplication.R

@Composable
fun MainScreen() {
    val context = LocalContext.current
    val intent = remember {
        Intent(
            Intent.ACTION_VIEW,
            Uri.parse("https://calendar.google.com/calendar/u/5/r")
        )
    }

    // Choose the appropriate navigation type based on your requirements
    val navigationType = ReplyNavigationType.BOTTOM_NAVIGATION

    // Scaffold with BottomNavigation
    Scaffold(
        bottomBar = {
            when (navigationType) {
                ReplyNavigationType.BOTTOM_NAVIGATION -> {
                    BottomAppBar(
                        contentColor = MaterialTheme.colorScheme.primary,
                        cutoutShape = MaterialTheme.shapes.small
                    ) {
                        BottomNavigation {
                            BottomNavigationItem(
                                selected = currentBackStackEntry == Destinations.Start.name,
                                onClick = { onHome() },
                                icon = {
                                    Icon(
                                        imageVector = Icons.Outlined.Home,
                                        contentDescription = stringResource(R.string.go_to_home)
                                    )
                                },
                                label = { Text("Home") }
                            )
                            BottomNavigationItem(
                                selected = currentBackStackEntry == Destinations.Calendar.name,
                                onClick = { context.startActivity(intent) },
                                icon = {
                                    Icon(
                                        imageVector = Icons.Filled.DateRange,
                                        contentDescription = stringResource(R.string.go_to_calendar)
                                    )
                                },
                                label = { Text("Calendar") }
                            )
                            BottomNavigationItem(
                                selected = currentBackStackEntry == Destinations.Team.name,
                                onClick = { onTeam() },
                                icon = {
                                    Icon(
                                        imageVector = Icons.Filled.Face,
                                        contentDescription = stringResource(R.string.go_to_team)
                                    )
                                },
                                label = { Text("Team") }
                            )
                            BottomNavigationItem(
                                selected = currentBackStackEntry == Destinations.ConditionOverview.name,
                                onClick = { onEyeDisorderOverview() },
                                icon = {
                                    Icon(
                                        imageVector = ImageVector.vectorResource(id = R.drawable.condition_icon),
                                        contentDescription = stringResource(R.string.go_to_conditions)
                                    )
                                },
                                label = { Text("Conditions") }
                            )
                        }
                    }
                }
                
    ReplyNavigationType.NAVIGATION_RAIL -> {
        Scaffold(
            scaffoldState = scaffoldState,
            topBar = {
                TopAppBar(
                    title = { Text("Your App Title") },
                    navigationIcon = {
                        IconButton(onClick = { /* Handle drawer opening here */ }) {
                            Icon(imageVector = Icons.Outlined.Menu, contentDescription = "Menu")
                        }
                    }
                )
            },
            drawerContent = {
                // Permanent Navigation Drawer content goes here
                // Include Navigation Rail if needed
            },
            content = { innerPadding ->
                // Main content goes here
                // Use innerPadding if needed
            }
        )
    }

    ReplyNavigationType.PERMANENT_NAVIGATION_DRAWER -> {
        Scaffold(
            scaffoldState = scaffoldState,
            topBar = {
                TopAppBar(
                    title = { Text("Your App Title") },
                    navigationIcon = {
                        IconButton(onClick = { /* Handle drawer opening here */ }) {
                            Icon(imageVector = Icons.Outlined.Menu, contentDescription = "Menu")
                        }
                    }
                )
            },
            drawerContent = {
                // Permanent Navigation Drawer content goes here
            },
            content = { innerPadding ->
                // Main content goes here
                // Use innerPadding if needed
            }
        )
    }
}
            }
        }
    ) { innerPadding ->
        // Your content goes here
    }
}